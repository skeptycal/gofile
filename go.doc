package gofile // import "github.com/skeptycal/gofile"

Package gofile provides support for file operations.

Package fs defines basic interfaces to a file system. A file system can be
provided by the host operating system but also by other packages.

const NormalMode os.FileMode = 0644 ...
const PathSep = os.PathSeparator ...
var ErrNoAlloc = NewGoFileError("memory allocation failure", "", ErrInvalid) ...
var ErrExist = NewGoFileError("", "", fs.ErrExist) ...
var Err = log.Err
var NewSyscallError = os.NewSyscallError
var SameFile = os.SameFile
func Copy(src, dest string) (int64, error)
func CopyBuffer(src, dst string, buffersize int) (written int64, err error)
func CopyUtil(src, dst string) (written int64, err error)
func Exists(filename string) bool
func InitialCapacity(capacity int) int
func IsDir(name string) bool
func IsRegular(name string) bool
func Mode(filename string) os.FileMode
func NotExists(filename string) bool
func PWD() string
func Stat(filename string) os.FileInfo
func StatCheck(filename string) (os.FileInfo, error)
type Closer interface{ ... }
type DIR interface{ ... }
type DirEntry = fs.DirEntry
type Errer interface{ ... }
    func NewPathError(op, path string, err error) Errer
type FS = fs.FS
type File = fs.File
type FileInfo = fs.FileInfo
type FileMode = fs.FileMode
type FileModer interface{ ... }
type FileOps interface{ ... }
type FileUnix interface{ ... }
type GoDir interface{ ... }
type GoFile interface{ ... }
type GoFileError struct{ ... }
    func NewGoFileError(op, path string, err error) *GoFileError
    func SetError(op, path string, err GoFileError) GoFileError
type PathError = os.PathError
type ReadDirFile = fs.ReadDirFile
type SortType int
    const Alpha SortType = iota + 1 ...
type SyscallError = os.SyscallError
type TimeZone int
    const EST TimeZone = -(5 + iota) ...
