package gofile

import (
	"math"
	"testing"
)

var capTests = []struct {
	name string
	size int
	want int
}{
	{"defaultBufSize", defaultBufSize, defaultBufSize},
	{"chunk", 512, defaultBufSize},
	{"smallBufferSize", smallBufferSize, defaultBufSize},
	{"5333", 5333, 5632},

	// {"1<<4", 1 << 4, 4096},
	// {"1<<5", 1 << 5, 4096},
	// {"1<<6", 1 << 6, 4096},
	// {"1<<7", 1 << 7, 4096},
	// {"1<<8", 1 << 8, 4096},
	// {"1<<9", 1 << 9, 4096},
	{"1<<10", 1 << 10, 4096},
	{"1<<11", 1 << 11, 4096},
	{"1<<12", 1 << 12, 4096},
	{"1<<13", 1 << 13, 8192},
	{"1<<14", 1 << 14, 16384},
	{"1<<15", 1 << 15, 32768},
	{"1<<16", 1 << 16, 65536},

	// {"1<<4 - 1", 1<<4 - 1, 4096},
	// {"1<<5 - 1", 1<<5 - 1, 4096},
	// {"1<<6 - 1", 1<<6 - 1, 4096},
	// {"1<<7 - 1", 1<<7 - 1, 4096},
	// {"1<<8 - 1", 1<<8 - 1, 4096},
	// {"1<<9 - 1", 1<<9 - 1, 4096},
	{"1<<10 - 1", 1<<10 - 1, 4096},
	{"1<<11 - 1", 1<<11 - 1, 4096},
	{"1<<12 - 1", 1<<12 - 1, 4096},
	{"1<<13 - 1", 1<<13 - 1, 8192},
	{"1<<14 - 1", 1<<14 - 1, 16384},
	{"1<<15 - 1", 1<<15 - 1, 32768},
	{"1<<16 - 1", 1<<16 - 1, 65536},

	// {"1<<4 + 1", 1<<4 + 1, 4096},
	// {"1<<5 + 1", 1<<5 + 1, 4096},
	// {"1<<6 + 1", 1<<6 + 1, 4096},
	// {"1<<7 + 1", 1<<7 + 1, 4096},
	// {"1<<8 + 1", 1<<8 + 1, 4096},
	// {"1<<9 + 1", 1<<9 + 1, 4096},
	{"1<<10 + 1", 1<<10 + 1, 4096},
	{"1<<11 + 1", 1<<11 + 1, 4096},
	{"1<<12 + 1", 1<<12 + 1, 4608},
	{"1<<13 + 1", 1<<13 + 1, 8704},
	{"1<<14 + 1", 1<<14 + 1, 16896},
	{"1<<15 + 1", 1<<15 + 1, 33280},
	{"1<<16 + 1", 1<<16 + 1, 66048},

	// {"1<<4 / 3", 1 << 4 / 3, 4096},
	// {"1<<5 / 3", 1 << 5 / 3, 4096},
	// {"1<<6 / 3", 1 << 6 / 3, 4096},
	// {"1<<7 / 3", 1 << 7 / 3, 4096},
	// {"1<<8 / 3", 1 << 8 / 3, 4096},
	// {"1<<9 / 3", 1 << 9 / 3, 4096},
	{"1<<10 / 3", 1 << 10 / 3, 4096},
	{"1<<11 / 3", 1 << 11 / 3, 4096},
	{"1<<12 / 3", 1 << 12 / 3, 4096},
	{"1<<13 / 3", 1 << 13 / 3, 4096},
	{"1<<14 / 3", 1 << 14 / 3, 5632},
	{"1<<15 / 3", 1 << 15 / 3, 11264},
	{"1<<16 / 3", 1 << 16 / 3, 22016},
}

// func ExampleCapTests() {
// 	for i, v := range capTests {
// 		fmt.Printf("%2d: %v(%v) = %v\n", i, v.name, v.size, v.want)
// 		// output:
// 	}
// }

func TestChunkMultiple(t *testing.T) {
	for _, tt := range capTests {
		t.Run(tt.name, func(t *testing.T) {
			want := int(math.Ceil(float64(tt.size)/chunk) * chunk)
			if got := chunkMultiple(tt.size); got != want {
				t.Errorf("chunkMultiple(%v) = %v, want %v", tt.size, got, want)
			}
		})
	}
}

func TestInitialCapacity(t *testing.T) {
	for _, tt := range capTests {
		t.Run(tt.name, func(t *testing.T) {
			if got := InitialCapacity(tt.size); got != tt.want {
				t.Errorf("InitialCapacity(%v) = %v, want %v", tt.size, got, tt.want)
			}
		})
	}
}
